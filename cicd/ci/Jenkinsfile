pipeline {
    agent any

    environment {
        GITHUB_CREDENTIALS_ID = 'github'
        REPO_URL = 'https://github.com/Jenium-lab/exchangerate.git'
        SONAR_AUTH_TOKEN = credentials('sonarqube')
        DOCKER_CREDENTIALS_ID = 'dockerhub'
        IMAGE_NAME = 'srijan581/exchangerate'
        GRADLE_HOME = '/opt/gradle'
        PATH = "$GRADLE_HOME/bin:$PATH"
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: '*/main']],
                        userRemoteConfigs: [
                            [url: REPO_URL, credentialsId: GITHUB_CREDENTIALS_ID]
                        ]
                    ])
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    sh 'chmod +x gradlew'
                    sh './gradlew build -x test -x runSmokeTest'
                }
            }
        }

        stage('Unit Test') {
            steps {
                script {
                    sh './gradlew test'
                }
            }
        }

        stage('Smoke Test') {
            steps {
                script {
                    sh './gradlew runSmokeTest'
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    withSonarQubeEnv('SonarQube') {
                        sh './gradlew sonar -Dsonar.login="$SONAR_AUTH_TOKEN" --stacktrace --info'
                    }

                    timeout(time: 10, unit: 'MINUTES') {
                        def qualityGate = waitForQualityGate()
                        if (qualityGate.status != 'OK') {
                            error "SonarQube Quality Gate failed: ${qualityGate.status}"
                        } else {
                            echo "SonarQube Quality Gate passed."
                        }
                    }
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    // Get the short commit hash
                    def commitHash = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                    def imageTag = "${commitHash}"
                    def imageNameWithTag = "${IMAGE_NAME}:${imageTag}"

                    echo "Building and pushing Docker image: ${imageNameWithTag}"

                    // Use the Docker Hub credentials to log in and push the image
                    docker.withRegistry('https://index.docker.io/v1/', DOCKER_CREDENTIALS_ID) {
                        // Build the Docker image
                        def image = docker.build(imageNameWithTag)

                        // Push the image to Docker Hub
                        image.push()
                    }

                    // Optionally, set the commit hash as an environment variable
                    env.COMMIT_HASH = commitHash
                }
            }
        }

        stage('Deploy on Dev') {
            steps {
                script {
                    def containerName = "exchangerates-container"
                    def imageTag = env.COMMIT_HASH

                    sh """
                        docker ps -q -f name=${containerName} | xargs -r docker stop
                        docker ps -a -q -f name=${containerName} | xargs -r docker rm
                    """

                    sh """
                        docker run -d --name ${containerName} -p 8090:8080 ${IMAGE_NAME}:${imageTag}
                    """
                }
            }
        }

        stage('Health Check on Dev') {
            steps {
                script {
                    echo "Waiting for application to be ready..."
                    sleep(time: 30, unit: "SECONDS")

                    def healthUrl = "http://172.25.204.24:8090/actuator/health"

                    def response = sh(script: "curl -s ${healthUrl}", returnStdout: true).trim()
                    echo "Health check response: ${response}"

                    def jsonResponse = readJSON text: response
                    def status = jsonResponse.status

                    if (status == 'UP') {
                        echo 'Application is healthy.'
                    } else {
                        error 'Health check failed: Application is not healthy.'
                    }
                }
            }
        }

        stage('Update Image Tag in Kubernetes') {
            steps {
                script {
                    def imageTag = env.COMMIT_HASH

                    sh 'git fetch origin main'
                    sh 'git reset --hard origin/main'

                    sh """
                        sed -i 's/tag:.*/tag: ${imageTag}/' k8chart/values.yaml
                    """

                    withCredentials([usernamePassword(credentialsId: GITHUB_CREDENTIALS_ID, usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
                        sh """
                            git config --global user.email "jenium81@gmail.com"
                            git config --global user.name "Jenium-lab"
                            git add k8chart/values.yaml
                            git commit -m "Update image tag to version ${imageTag}"
                            git push https://${GIT_USER}:${GIT_PASS}@github.com/Jenium-lab/exchangerate.git main
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
